#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const meow = require('meow');
const inquirer = require('inquirer');
const _ = require('lodash');
const mkdirp = require('mkdirp');
const cosmiconfig = require('cosmiconfig');

const codeAnalyzer = require('../lib');
const mkdirpAsync = promisify(mkdirp);
const writeFileAsync = promisify(fs.writeFile);
const explorer = cosmiconfig('code-analyzer');

const Logger = require('../lib/logger');
const FileUtils = require('../lib/utils/file');
const ReportFormatEnum = require('../lib/enums/report-format');

let cwd = process.cwd();
let searchedFor = explorer.searchSync();

if (FileUtils.hasPackageJsonFile(cwd)) {
    const cli = meow(
        fs.readFileSync(path.resolve(path.join(__dirname, './resources/help.txt'))).toString(),
        {
            'flags': {
                'init': {
                    'type': 'boolean',
                    'alias': 'i'
                }
            }
        }
    );

    if (cli.flags.init) {
        // Use of inquirer
        const possibleDirectories = FileUtils.getBaseDirectories(cwd);

        inquirer
            .prompt([
                {
                    'type': 'checkbox',
                    'name': 'baseDirectories',
                    'message': 'Please choose on which folder(s) do you want to run your code analyzing',
                    'choices': possibleDirectories.map(folderName => {
                        return {
                            'name': folderName,
                            'checked': false
                        };
                    }),
                    'default': searchedFor && searchedFor.config ? searchedFor.config.baseDirectories : null,
                    'validate': inputs => !!(inputs && inputs.length > 0)
                },
                {
                    'type': 'list',
                    'name': 'reportFormat',
                    'message': 'Please choose report format',
                    'default': searchedFor && searchedFor.config ? searchedFor.config.reportFormat : ReportFormatEnum.CONSOLE,
                    'choices': _.map(ReportFormatEnum, (value) => value)
                },
                {
                    'type': 'input',
                    'name': 'reportPath',
                    'message': 'Please specify the path for your report',
                    'default': searchedFor && searchedFor.config ? searchedFor.config.reportPath : null,
                    'when': response => response.reportFormat !== ReportFormatEnum.CONSOLE
                },
                {
                    'type': 'confirm',
                    'name': 'saveConfig',
                    'message': 'Do you want to persist your configuration?'
                }
            ])
            .then(options => {
                let reportPath = options.reportPath ? path.resolve(path.join(cwd, options.reportPath)) : undefined;
                let promise = Promise.resolve();

                if (reportPath) {
                    promise =  mkdirpAsync(path.dirname(reportPath));
                }

                if (options.saveConfig) {
                    promise = promise.then(() => {
                        return writeFileAsync(
                            path.resolve(path.join(cwd, './.code-analyzerrc')),
                            JSON.stringify({ 'baseDirectories': options.baseDirectories, 'reportFormat': options.reportFormat, 'reportPath': options.reportPath }, null, 3)
                        );
                    });
                }

                return promise
                    .then(() => codeAnalyzer({ cwd, 'baseDirectories': options.baseDirectories, 'reportFormat': options.reportFormat, reportPath }));
            })
            .catch((err) => {
                Logger.error('An error occured');
                Logger.error(err);
                process.exit(1);
            });

    } else {
        let baseConfiguration = searchedFor && searchedFor.config ? searchedFor.config : { 'baseDirectories': ['app', 'bin', 'lib', 'src'] };
        let reportPath = searchedFor && searchedFor.config && searchedFor.config.reportPath ? path.resolve(path.join(cwd, searchedFor.config.reportPath)) : undefined;
        let promise = Promise.resolve();

        if (reportPath) {
            promise =  mkdirpAsync(path.dirname(reportPath));
        }

        promise
            .then(() => codeAnalyzer(Object.assign(baseConfiguration, { cwd, reportPath })))
            .catch((err) => {
                Logger.error('An error occured');
                Logger.error(err);
                process.exit(1);
            });
    }

} else {
    Logger.error('Sorry, but package.json file was detected');
    Logger.error('For more details, please do codeanalyzer --help');
}


